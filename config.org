#+title: Config
#+author: Geraldo Hendriks

* Table of contents :toc:
- [[#identity-setup][Identity setup]]
- [[#doom-dashboard][Doom-Dashboard]]
- [[#theming][Theming]]
  - [[#global-theme][Global theme]]
  - [[#line-numbers][Line numbers]]
- [[#emojis][Emojis]]
- [[#ivy][IVY]]
  - [[#ivy-posframe][IVY-POSFRAME]]
- [[#fonts][Fonts]]
- [[#org][Org]]
- [[#dired][Dired]]
- [[#erc][ERC]]
  - [[#keybinds][Keybinds]]
  - [[#identity][Identity]]
  - [[#layout][Layout]]
- [[#line-settings][Line Settings]]
- [[#elcord][Elcord]]

* Identity setup
Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets. This sets my identity.
#+begin_src emacs-lisp
(setq user-full-name "Geraldo Hendriks"
      user-mail-address "geraldohendriks@gmail.com")
#+end_src

* Doom-Dashboard
#+begin_src emacs-lisp
(setq fancy-splash-image "~/.doom.d/Emacs-logo.svg")
#+end_src
* Theming
** Global theme
This sets the global DOOM theme
#+begin_src emacs-lisp
(setq doom-theme 'doom-one)
#+end_src

With this you can change the theme
#+begin_src emacs-lisp
(map! :leader
      :desc "Load new theme" "h t" #'counsel-load-theme)
#+end_src

** Line numbers
This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.
#+begin_src emacs-lisp
(setq display-line-numbers-type t)
#+end_src

* Emojis
Emojify is an Emacs extension to display emojis. It can display github style emojis like :smile: or plain ascii ones like :).

#+begin_src emacs-lisp
(use-package emojify
  :hook (after-init . global-emojify-mode))
#+end_src

* IVY
Ivy is a generic completion mechanism for Emacs.

** IVY-POSFRAME
Ivy-posframe is an ivy extension, which lets ivy use posframe to show its candidate menu.  Some of the settings below involve:
+ ivy-posframe-display-functions-alist -- sets the display position for specific programs
+ ivy-posframe-height-alist -- sets the height of the list displayed for specific programs

Available functions (positions) for 'ivy-posframe-display-functions-alist'
+ ivy-posframe-display-at-frame-center
+ ivy-posframe-display-at-window-center
+ ivy-posframe-display-at-frame-bottom-left
+ ivy-posframe-display-at-window-bottom-left
+ ivy-posframe-display-at-frame-bottom-window-center
+ ivy-posframe-display-at-point
+ ivy-posframe-display-at-frame-top-center

=NOTE:= If the setting for 'ivy-posframe-display' is set to 'nil' (false), anything that is set to 'ivy-display-function-fallback' will just default to their normal position in Doom Emacs (usually a bottom split).  However, if this is set to 't' (true), then the fallback position will be centered in the window.

#+BEGIN_SRC emacs-lisp
(setq ivy-posframe-display-functions-alist
      '((swiper                     . ivy-posframe-display-at-point)
        (complete-symbol            . ivy-posframe-display-at-point)
        (counsel-M-x                . ivy-posframe-display-at-frame-center)
        (counsel-esh-history        . ivy-posframe-display-at-frame-center)
        (counsel-describe-function  . ivy-display-function-fallback)
        (counsel-describe-variable  . ivy-display-function-fallback)
        (counsel-find-file          . ivy-posframe-display-at-frame-center)
        (counsel-recentf            . ivy-posframe-display-at-frame-center)
        (counsel-register           . ivy-posframe-display-at-frame-bottom-window-center)
        (t                          . ivy-posframe-display-at-frame-center)
        (nil                        . ivy-posframe-display))
      ivy-posframe-height-alist
      '((swiper . 20)
        (t . 18)))
(ivy-posframe-mode 1) ; 1 enables posframe-mode, 0 disables it.
#+END_SRC

* Fonts
Settings related to fonts within Doom Emacs:
+ 'doom-font' -- standard monospace font that is used for most things in Emacs.
+ 'doom-variable-pitch-font' -- variable font which is useful in some Emacs plugins.
+ 'doom-big-font' -- used in doom-big-font-mode; useful for presentations.
+ 'font-lock-comment-face' -- for comments.
+ 'font-lock-keyword-face' -- for keywords with special significance like 'setq' in elisp.

#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "JetBrainsMono Nerd Font Mono" :size 14)
      doom-variable-pitch-font (font-spec :family "JetBrainsMono Nerd Font" :size 14)
      doom-big-font (font-spec :family "JetBrainsMono Nerd Font Mono" :size 24))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+END_SRC

* Org
I wrapped most of this block in (after! org).  Without this, my settings might be evaluated too early, which will result in my settings being overwritten by Doom's defaults. org-superstar (+pretty) to the org section of my Doom Emacs init.el.

#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-directory "~/Org/"
        org-agenda-files '("~/Org/agenda.org")
        org-ellipsis " ▼ "
        org-log-done 'time
        org-superstar-headline-bullets-list '("◉" "●" "○" "◆" "●" "○" "◆")
        org-hide-emphasis-markers t
        ;; ex. of org-link-abbrev-alist in action
        ;; [[arch-wiki:Name_of_Page][Description]]
        org-link-abbrev-alist    ; This overwrites the default Doom org-link-abbrev-list
        '(("google" . "http://www.google.com/search?q=")
          ("arch-wiki" . "https://wiki.archlinux.org/index.php/")
          ("ddg" . "https://duckduckgo.com/?q=")
          ("wiki" . "https://en.wikipedia.org/wiki/"))
        org-table-convert-region-max-lines 20000))
#+END_SRC

* Dired
Dired is the file manager within Emacs.  Below, I setup keybindings.

| COMMAND            | DESCRIPTION                                 | KEYBINDING |
|--------------------+---------------------------------------------+------------|
| dired-up-directory | /Go up in directory tree/                     | h          |
| dired-find-file    | /Go down in directory tree (or open if file)/ | l          |

#+begin_src emacs-lisp
(evil-define-key 'normal dired-mode-map
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-find-file
  )
#+end_src

* ERC
** Keybinds
| COMMAND | DESCRIPTION                                 | KEYBINDING |
|---------+---------------------------------------------+------------|
| erc-tls | /Launch ERC using more secure TLS connection/ | SPC e E    |

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("e". "ERC")
       :desc "Launch ERC with TLS connection" "E" #'erc-tls))
#+end_src
** Identity
#+begin_src emacs-lisp
(setq erc-server "irc.libera.chat"
      erc-nick "ghendriks"
      erc-user-full-name "Geraldo Hendriks"
      erc-email-userid "geraldohendriks@gmail.com")
#+end_src

** Layout
#+begin_src emacs-lisp
(setq erc-fill-column 100
      erc-fill-function 'erc-fill-static
      erc-fill-static-center 20
      erc-prompt (lambda () (concat "[" (buffer-name) "]")))
#+end_src

* Line Settings
I set comment-line to 'SPC TAB TAB' which is a rather comfortable keybinding for me.  The standard Emacs keybinding for comment-line is 'C-x C-;'.  The other keybindings are for commands that toggle on/off various line-related settings. Doom Emacs uses 'SPC t' for "toggle" commands, so I choose 'SPC t' plus 'key' for those bindings.

| COMMAND                  | DESCRIPTION                               | KEYBINDING  |
|--------------------------+-------------------------------------------+-------------|
| comment-line             | /Comment or uncomment lines/                | SPC TAB TAB |
| hl-line-mode             | /Toggle line highlighting in current frame/ | SPC t h     |
| global-hl-line-mode      | /Toggle line highlighting globally/         | SPC t H     |
| doom/toggle-line-numbers | /Toggle line numbers/                       | SPC t l     |
| toggle-truncate-lines    | /Toggle truncate lines/                     | SPC t t     |

#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "Comment or uncomment lines" "TAB TAB" #'comment-line
      (:prefix ("t" . "toggle")
       :desc "Toggle line numbers" "l" #'doom/toggle-line-numbers)
      )
#+END_SRC
* Elcord
#+begin_src emacs-lisp
(elcord-mode)

(custom-set-variables
 '(elcord-editor-icon "emacs_material_icon")
 '(elcord-mode t nil (elcord)))
#+end_src
